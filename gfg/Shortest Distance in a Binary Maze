//{ Driver Code Starts
// Initial Template for C++

#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
// User function Template for C++

class Solution {
  public:
    bool isReachable(vector<vector<int>>&grid,int i,int j) {
        return i>=0 && j>=0 && i<grid.size() && j<grid[0].size() && grid[i][j]==1;
    }
    int shortestPath(vector<vector<int>>&grid,pair<int,int>source,pair<int,int>destination) {
        if(source==destination) {
            return 0;
        }
        queue<vector<int>>q;
        q.push({source.first,source.second,0});
        grid[source.first][source.second]=-1;
        int dx[4]={-1,1,0,0};
        int dy[4]={0,0,-1,1};
        while(!q.empty()) {
            auto node=q.front();
            q.pop();
            for(int i=0;i<4;i++) {
                int x=node[0]+dx[i],y=node[1]+dy[i];
                if(isReachable(grid,x,y)) {
                    if(x==destination.first && y==destination.second) {
                        return node[2]+1;
                    }
                    grid[x][y]=-1;
                    q.push({x,y,node[2]+1});
                }
            }
        }
        return -1;
    }
};


//{ Driver Code Starts.
int main() {

    int t;
    cin >> t;
    while (t--) {
        int n, m;
        cin >> n >> m;
        vector<vector<int>> grid(n, vector<int>(m));

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                cin >> grid[i][j];
            }
        }

        pair<int, int> source, destination;
        cin >> source.first >> source.second;
        cin >> destination.first >> destination.second;
        Solution obj;
        cout << obj.shortestPath(grid, source, destination) << endl;
    }
}

// } Driver Code Ends
